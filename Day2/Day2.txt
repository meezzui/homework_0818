lombok
-테이블을 구조화한 도메인 클래스(Entity, DTO, VO 이 세개는 데이터를 저장할 수 있음)에사
getter/setter 메소드와 toString, equals, hashCode 등의 메서드를 어노테이션으로 사용할 수 있도록 해주는 라이브러리
(@으로 사용할 수 있게 하는 편한 라이브러리)
-@Data: 자동으로 getter/setter를 내부적으로 생성해 줌
_@AllrgsConstructor : 모든 매개변수를 지원하는 생성자를 생성
-@NorgsConstructor : 매개변수가 없는 빈 생성자를 생성
-@Builder : 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로
            다른 표현 결과를

JPA(Java Persistence API)
- 자바의 ORM 기술 표준
- 객체를 DB에 저장하고 관리할 떄 개발자가 직접 SQL을 작성하지 않아도 됨
-JPA가 개발자 대신 적절한 SQl을 생성해서 DB에 전달하고, 갹채를 자동으로 Mapping 해줌
-sql구문을 안 쓰고 그것을 java의 매소드를 이용하여 사용한다. 즉, java메소드로 객체화하여 사용.
-단, 속도가 쿼리문을 쓸 때 보다는 살짝 느리다.
-내부적으로는 JPA 객체를 만들어서 디비쪽에 명령을 내린다.

Hibernate
- ORM 프레임워크 중 가장 많이 사용되는 프레임워크

🎋ORM(Object-Relational Mapping)
-객체와 관계형 DB를 매핑
- 객체를 마치 자바 컬렉션에 저장할 수 있고 적절한 SQL을 생성해서 DB객체에 저장


자바의 변수
Camel Case: 단어를 표기할 때 첫문자는 소문자로 시작하고 띄어쓰기 대신 대무자로 단어를 구분
 예) numKor, numEng...

DB테이블, API정의, 통신규격
Snake Case : 단어를 표기할 때 모두 소문자로 표기하며, 띄어쓰기 대신 언더바(_)로 표기
 예) tb_member, vw_mem_select..

@Entity
- JPA에서 테이블을 자동으로 관리해주는 기능흥ㄹ 가진 객체를 생성하는 어노테이션
 JPA Entity <-----> Database DBTable

@Id 와 @GeneratedValue를 같이 쓰는 경우가 많다.
@Id (같은 값을 못 쓰게 하겠다)
@GeneratedValue(값 설정)
- insert 쿼리 전에 hibernate_sequence 테이블의 데이터에 대하여 select, update 쿼리가 실행되며 id 생성을 위해
hibernate_sequence 테이블의 시퀀스 값을 가져와 업데이트하고 그 값으로 id를 생성하여 insert 쿼리에 사용

junit
- java에서 독립된 단위테스트를(Unit Test)를 지원해주는 프래임워크

Unit Test
-소스코드의 특정 모듈이 의도된 대로 정확히 작동하는지 검증하는 절차

Autowired
-필요한 의존 객체의 "타입"에 해당하는 빈을 찾아 주입함
-생성자, setter, vlfem
-의존성 주입






